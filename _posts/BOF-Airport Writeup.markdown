---
# multilingual page pair id, this must pair with translations of this page. (This name must be unique)
lng_pair: id_autogeneratedsamplecontent_1
title: _autogeneratedsamplecontent_

# post specific
# if not specified, .name will be used from _data/owner/[language].yml
#author: ""
# multiple category is not supported
category: auto generated
# multiple tag entries are possible
tags: [ctf, writeup, bof]
# thumbnail image for post
img: ":post_pic1.jpg"
# disable comments on this page
comments_disable: true

# publish date
date: 2022-04-16 02:03:53 +0900

# seo
# if not specified, date will be used.
#meta_modify_date: 2021-08-10 11:32:53 +0900
# check the meta_common_description in _data/owner/[language].yml
#meta_description: ""

# optional
# please use the "image_viewer_on" below to enable image viewer for individual pages or posts (_posts/ or [language]/_posts folders).
# image viewer can be enabled or disabled for all posts using the "image_viewer_posts: true" setting in _data/conf/main.yml.
#image_viewer_on: true
# please use the "image_lazy_loader_on" below to enable image lazy loader for individual pages or posts (_posts/ or [language]/_posts folders).
# image lazy loader can be enabled or disabled for all posts using the "image_lazy_loader_posts: true" setting in _data/conf/main.yml.
#image_lazy_loader_on: true
# exclude from on site search
#on_site_search_exclude: true
# exclude from search engines
#search_engine_exclude: true
# to disable this page, simply set published: false or delete this file
#published: false
---

# Overview

In order to perform a buffer overflow attack on the provided binary, we need to enter abritary data until we reach a segfault. The exact amount of data that leads to segfault will be our padding. After this padding we can insert the memory address that we want to overwrite as the return address onto the stack using /xbyte /xbyte, etc. This will change the flow of the program and allow us to output the flag. 

# How to Solve

## Ghirda

Open bof-airport in Ghidra decompiler to look at the assembly code

![Untitled](:Untitled.png)

- The important sections to note is the CMP call. The program is comparing the contents of `security_check` with the value `0xcacacaca`. It also appears that `security_check` is loaded into register `$ebp`.
- Also important to note is that there is a character buffer `char airport [30]` . The program calls `gets(airport)` on the buffer which is a vulnerable library that allows us to overflow `char airport [30]`.

## GDB (pwndbg)

Now we can take the address for the CMP call, `0x08049267` , and set a breakpoint in pwndbg allowing us to take a look at the stack and determine the amount of padding required to overflow. 

![Untitled](:Untitled%201.png)

Next, we can run the program using `run` or `r`. We know that the buffer has a size of 30 bytes from the Ghirda decompilation. So lets input more than 30 A’s as standard input to the program when prompted. I inputed 34 A’s below

![Untitled](:Untitled%202.png)

Here we can see that `$eax` on the stack as been filled up with A’s, this is where the airport variable is stored. But more importantly, `$esp` has also been partially overwritten with A’s in hex form `0x4141cff0`. Now that we know this we need to craft a payload including the 30 bytes worth of padding required to overwrite the stack pointer `$esp`. We can do so using the echo command with the -e flag. Our payload will be:

`echo -e “AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\xca\xca\xca\xca`

Inputting this payload message into pwndbg we can see that is successfully overwrites the `security_check` variable with `0xcacacaca` and allows us to pass the compare statement giving us the flag. 

![Untitled](:Untitled%203.png)

![Untitled](:Untitled%204.png)

The flag is only given in netcat so run the payload there to get the flag below: 

![Untitled](:Untitled%205.png)